// Library
import {
Injectable,
BadRequestException,
NotFoundException
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';

// Internal
import { {{pascalCase moduleName}}Model } from './{{moduleName}}.model';

@Injectable()
export class {{pascalCase moduleName}}Service {
private readonly {{moduleName}}: {{pascalCase moduleName}}Model[] = [];

constructor(
@InjectRepository({{pascalCase moduleName}}Model)
private readonly {{moduleName}}Repository: Repository<{{pascalCase moduleName}}Model>
    ) {}

    protected getId(paramId: any): number {
        const id = parseInt(paramId, 10);

        if (isNaN(id) || typeof id !== 'number') {
            throw new BadRequestException();
        }

        return id;
    }

    async create({{moduleName}}Payload: {{pascalCase moduleName}}Model): Promise<{{pascalCase moduleName}}Model> {
        const {{moduleName}} = new {{pascalCase moduleName}}Model();
        {{moduleName}}.groupId = {{moduleName}}Payload.groupId;
        {{moduleName}}.message = {{moduleName}}Payload.message;
        {{moduleName}}.date = {{moduleName}}Payload.date;
        {{moduleName}}.ownerId = {{moduleName}}Payload.ownerId;

        return await this.{{moduleName}}Repository.save({{moduleName}});
    }

    async findAll(): Promise<{{pascalCase moduleName}}Model[]> {
        return await this.{{moduleName}}Repository.find({
            cache: true,
            order: { id: 'ASC' }
        });
    }

    async findOneById(id: number): Promise<{{pascalCase moduleName}}Model> {
        return await this.{{moduleName}}Repository.findOne(id, { cache: true });
    }

    async update(paramId: any, entity: {{pascalCase moduleName}}Model): Promise<{{pascalCase moduleName}}Model> {
        await this.{{moduleName}}Repository.update(paramId, entity);
        return await this.findOneById(paramId);
    }

    async delete(paramId: any): Promise<void> {
        const id = this.getId(paramId);
        try {
            await this.{{moduleName}}Repository.delete(id);
        } catch (err) {
            throw new NotFoundException();
        }
    }
}