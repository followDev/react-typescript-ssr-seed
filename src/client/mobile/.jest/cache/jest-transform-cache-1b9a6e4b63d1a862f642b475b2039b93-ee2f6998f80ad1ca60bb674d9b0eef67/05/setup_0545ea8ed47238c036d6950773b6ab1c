3acb51040f3e21f87d2b5996038f6efc
'use strict';

jest.mock("../Libraries/Core/Devtools/setupDevtools");
jest.mock("../Libraries/Core/InitializeCore", function () {}).mock('../Libraries/Image/Image', function () {
  return mockComponent('../Libraries/Image/Image');
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput');
}).mock('../Libraries/Modal/Modal', function () {
  return mockComponent('../Libraries/Modal/Modal');
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock');
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  return jest.requireActual('../Libraries/Components/ScrollView/__mocks__/ScrollViewMock');
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator');
}).mock('../Libraries/Animated/src/AnimatedImplementation', function () {
  var AnimatedImplementation = jest.requireActual('../Libraries/Animated/src/AnimatedImplementation');
  var oldCreate = AnimatedImplementation.createAnimatedComponent;

  AnimatedImplementation.createAnimatedComponent = function (Component, defaultProps) {
    var Wrapped = oldCreate(Component, defaultProps);
    Wrapped.__skipSetNativeProps_FOR_TESTS_ONLY = true;
    return Wrapped;
  };

  return AnimatedImplementation;
}).mock('../Libraries/Renderer/shims/ReactNative', function () {
  var ReactNative = jest.requireActual('../Libraries/Renderer/shims/ReactNative');
  var NativeMethodsMixin = ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  (0, _extends2.default)(NativeMethodsMixin, MockNativeMethods);
  (0, _extends2.default)(ReactNative.NativeComponent.prototype, MockNativeMethods);
  return ReactNative;
}).mock('../Libraries/Components/Touchable/ensureComponentIsNative', function () {
  return function () {
    return true;
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var MockNativeMethods = jest.requireActual('./MockNativeMethods');
var mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('../Libraries/polyfills/Object.es7.js');
jest.requireActual('../Libraries/polyfills/error-guard');
global.__DEV__ = true;
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');

global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
};

jest.setMock("../Libraries/vendor/core/ErrorUtils", require("../Libraries/vendor/core/ErrorUtils"));
var mockNativeModules = {
  AccessibilityInfo: {
    addEventListener: jest.fn(),
    announceForAccessibility: jest.fn(),
    fetch: jest.fn(),
    isBoldTextEnabled: jest.fn(),
    isGrayscaleEnabled: jest.fn(),
    isInvertColorsEnabled: jest.fn(),
    isReduceMotionEnabled: jest.fn(),
    isReduceTransparencyEnabled: jest.fn(),
    isScreenReaderEnabled: jest.fn(),
    removeEventListener: jest.fn(),
    setAccessibilityFocus: jest.fn()
  },
  AlertManager: {
    alertWithArgs: jest.fn()
  },
  AppState: {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  },
  AsyncLocalStorage: {
    multiGet: jest.fn(function (keys, callback) {
      return process.nextTick(function () {
        return callback(null, []);
      });
    }),
    multiSet: jest.fn(function (entries, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    multiRemove: jest.fn(function (keys, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    multiMerge: jest.fn(function (entries, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    clear: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    getAllKeys: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(null, []);
      });
    })
  },
  BuildInfo: {
    appVersion: '0',
    buildVersion: '0',
    getConstants: function getConstants() {
      return {
        appVersion: '0',
        buildVersion: '0'
      };
    }
  },
  Clipboard: {
    setString: jest.fn()
  },
  DataManager: {
    queryData: jest.fn()
  },
  DeviceInfo: {
    Dimensions: {
      window: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750
      },
      screen: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750
      }
    }
  },
  FacebookSDK: {
    login: jest.fn(),
    logout: jest.fn(),
    queryGraphPath: jest.fn(function (path, method, params, callback) {
      return callback();
    })
  },
  GraphPhotoUpload: {
    upload: jest.fn()
  },
  I18n: {
    translationsDictionary: JSON.stringify({
      'Good bye, {name}!|Bye message': "\xA1Adi\xF3s {name}!"
    })
  },
  ImageLoader: {
    getSize: jest.fn(function (url) {
      return Promise.resolve({
        width: 320,
        height: 240
      });
    }),
    prefetchImage: jest.fn()
  },
  ImageViewManager: {
    getSize: jest.fn(function (uri, success) {
      return process.nextTick(function () {
        return success(320, 240);
      });
    }),
    prefetchImage: jest.fn()
  },
  KeyboardObserver: {
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  Linking: {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    removeEventListener: jest.fn(),
    sendIntent: jest.fn()
  },
  LocationObserver: {
    addListener: jest.fn(),
    getCurrentPosition: jest.fn(),
    removeListeners: jest.fn(),
    requestAuthorization: jest.fn(),
    setConfiguration: jest.fn(),
    startObserving: jest.fn(),
    stopObserving: jest.fn()
  },
  ModalFullscreenViewManager: {},
  NetInfo: {
    fetch: jest.fn(function () {
      return Promise.resolve();
    }),
    getConnectionInfo: jest.fn(function () {
      return Promise.resolve();
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    isConnected: {
      fetch: jest.fn(function () {
        return Promise.resolve();
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    isConnectionExpensive: jest.fn(function () {
      return Promise.resolve();
    })
  },
  Networking: {
    sendRequest: jest.fn(),
    abortRequest: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  PushNotificationManager: {
    presentLocalNotification: jest.fn(),
    scheduleLocalNotification: jest.fn(),
    cancelAllLocalNotifications: jest.fn(),
    removeAllDeliveredNotifications: jest.fn(),
    getDeliveredNotifications: jest.fn(function (callback) {
      return process.nextTick(function () {
        return [];
      });
    }),
    removeDeliveredNotifications: jest.fn(),
    setApplicationIconBadgeNumber: jest.fn(),
    getApplicationIconBadgeNumber: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(0);
      });
    }),
    cancelLocalNotifications: jest.fn(),
    getScheduledLocalNotifications: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback();
      });
    }),
    requestPermissions: jest.fn(function () {
      return Promise.resolve({
        alert: true,
        badge: true,
        sound: true
      });
    }),
    abandonPermissions: jest.fn(),
    checkPermissions: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback({
          alert: true,
          badge: true,
          sound: true
        });
      });
    }),
    getInitialNotification: jest.fn(function () {
      return Promise.resolve(null);
    }),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  SourceCode: {
    scriptURL: null
  },
  StatusBarManager: {
    HEIGHT: 42,
    setColor: jest.fn(),
    setStyle: jest.fn(),
    setHidden: jest.fn(),
    setNetworkActivityIndicatorVisible: jest.fn(),
    setBackgroundColor: jest.fn(),
    setTranslucent: jest.fn()
  },
  Timing: {
    createTimer: jest.fn(),
    deleteTimer: jest.fn()
  },
  UIManager: {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    setChildren: jest.fn(),
    manageChildren: jest.fn(),
    updateView: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    AndroidTextInput: {
      Commands: {}
    },
    ModalFullscreenView: {
      Constants: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  },
  BlobModule: {
    BLOB_URI_SCHEME: 'content',
    BLOB_URI_HOST: null,
    addNetworkingHandler: jest.fn(),
    enableBlobSupport: jest.fn(),
    disableBlobSupport: jest.fn(),
    createFromParts: jest.fn(),
    sendBlob: jest.fn(),
    release: jest.fn()
  },
  WebSocketModule: {
    connect: jest.fn(),
    send: jest.fn(),
    sendBinary: jest.fn(),
    ping: jest.fn(),
    close: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  }
};
Object.keys(mockNativeModules).forEach(function (module) {
  try {
    jest.doMock(module, function () {
      return mockNativeModules[module];
    });
  } catch (e) {
    jest.doMock(module, function () {
      return mockNativeModules[module];
    }, {
      virtual: true
    });
  }
});
jest.doMock("../Libraries/BatchedBridge/NativeModules", function () {
  return mockNativeModules;
});
jest.doMock("../Libraries/ReactNative/requireNativeComponent", function () {
  var React = require('react');

  return function (viewName) {
    return function (_React$Component) {
      (0, _inherits2.default)(_class, _React$Component);

      function _class() {
        (0, _classCallCheck2.default)(this, _class);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_class).apply(this, arguments));
      }

      (0, _createClass2.default)(_class, [{
        key: "render",
        value: function render() {
          return React.createElement(viewName, this.props, this.props.children);
        }
      }]);
      return _class;
    }(React.Component);
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0NvbXBvbmVudCIsIk1vY2tOYXRpdmVNZXRob2RzIiwicmVxdWlyZUFjdHVhbCIsIkFuaW1hdGVkSW1wbGVtZW50YXRpb24iLCJvbGRDcmVhdGUiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIldyYXBwZWQiLCJfX3NraXBTZXROYXRpdmVQcm9wc19GT1JfVEVTVFNfT05MWSIsIlJlYWN0TmF0aXZlIiwiTmF0aXZlTWV0aG9kc01peGluIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJOYXRpdmVDb21wb25lbnQiLCJwcm90b3R5cGUiLCJnbG9iYWwiLCJfX0RFVl9fIiwiUHJvbWlzZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJjbGVhclRpbWVvdXQiLCJzZXRNb2NrIiwicmVxdWlyZSIsIm1vY2tOYXRpdmVNb2R1bGVzIiwiQWNjZXNzaWJpbGl0eUluZm8iLCJhZGRFdmVudExpc3RlbmVyIiwiZm4iLCJhbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkiLCJmZXRjaCIsImlzQm9sZFRleHRFbmFibGVkIiwiaXNHcmF5c2NhbGVFbmFibGVkIiwiaXNJbnZlcnRDb2xvcnNFbmFibGVkIiwiaXNSZWR1Y2VNb3Rpb25FbmFibGVkIiwiaXNSZWR1Y2VUcmFuc3BhcmVuY3lFbmFibGVkIiwiaXNTY3JlZW5SZWFkZXJFbmFibGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEFjY2Vzc2liaWxpdHlGb2N1cyIsIkFsZXJ0TWFuYWdlciIsImFsZXJ0V2l0aEFyZ3MiLCJBcHBTdGF0ZSIsIkFzeW5jTG9jYWxTdG9yYWdlIiwibXVsdGlHZXQiLCJrZXlzIiwicHJvY2VzcyIsIm5leHRUaWNrIiwibXVsdGlTZXQiLCJlbnRyaWVzIiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwiY2xlYXIiLCJnZXRBbGxLZXlzIiwiQnVpbGRJbmZvIiwiYXBwVmVyc2lvbiIsImJ1aWxkVmVyc2lvbiIsImdldENvbnN0YW50cyIsIkNsaXBib2FyZCIsInNldFN0cmluZyIsIkRhdGFNYW5hZ2VyIiwicXVlcnlEYXRhIiwiRGV2aWNlSW5mbyIsIkRpbWVuc2lvbnMiLCJ3aW5kb3ciLCJmb250U2NhbGUiLCJoZWlnaHQiLCJzY2FsZSIsIndpZHRoIiwic2NyZWVuIiwiRmFjZWJvb2tTREsiLCJsb2dpbiIsImxvZ291dCIsInF1ZXJ5R3JhcGhQYXRoIiwicGF0aCIsIm1ldGhvZCIsInBhcmFtcyIsIkdyYXBoUGhvdG9VcGxvYWQiLCJ1cGxvYWQiLCJJMThuIiwidHJhbnNsYXRpb25zRGljdGlvbmFyeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJJbWFnZUxvYWRlciIsImdldFNpemUiLCJ1cmwiLCJyZXNvbHZlIiwicHJlZmV0Y2hJbWFnZSIsIkltYWdlVmlld01hbmFnZXIiLCJ1cmkiLCJzdWNjZXNzIiwiS2V5Ym9hcmRPYnNlcnZlciIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXJzIiwiTGlua2luZyIsIm9wZW5VUkwiLCJjYW5PcGVuVVJMIiwib3BlblNldHRpbmdzIiwiZ2V0SW5pdGlhbFVSTCIsInNlbmRJbnRlbnQiLCJMb2NhdGlvbk9ic2VydmVyIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwicmVxdWVzdEF1dGhvcml6YXRpb24iLCJzZXRDb25maWd1cmF0aW9uIiwic3RhcnRPYnNlcnZpbmciLCJzdG9wT2JzZXJ2aW5nIiwiTW9kYWxGdWxsc2NyZWVuVmlld01hbmFnZXIiLCJOZXRJbmZvIiwiZ2V0Q29ubmVjdGlvbkluZm8iLCJpc0Nvbm5lY3RlZCIsImlzQ29ubmVjdGlvbkV4cGVuc2l2ZSIsIk5ldHdvcmtpbmciLCJzZW5kUmVxdWVzdCIsImFib3J0UmVxdWVzdCIsIlB1c2hOb3RpZmljYXRpb25NYW5hZ2VyIiwicHJlc2VudExvY2FsTm90aWZpY2F0aW9uIiwic2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbiIsImNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9ucyIsInJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJnZXREZWxpdmVyZWROb3RpZmljYXRpb25zIiwicmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsInNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyIiwiZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnMiLCJnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMiLCJyZXF1ZXN0UGVybWlzc2lvbnMiLCJhbGVydCIsImJhZGdlIiwic291bmQiLCJhYmFuZG9uUGVybWlzc2lvbnMiLCJjaGVja1Blcm1pc3Npb25zIiwiZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbiIsIlNvdXJjZUNvZGUiLCJzY3JpcHRVUkwiLCJTdGF0dXNCYXJNYW5hZ2VyIiwiSEVJR0hUIiwic2V0Q29sb3IiLCJzZXRTdHlsZSIsInNldEhpZGRlbiIsInNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJzZXRUcmFuc2x1Y2VudCIsIlRpbWluZyIsImNyZWF0ZVRpbWVyIiwiZGVsZXRlVGltZXIiLCJVSU1hbmFnZXIiLCJBbmRyb2lkVmlld1BhZ2VyIiwiQ29tbWFuZHMiLCJzZXRQYWdlIiwic2V0UGFnZVdpdGhvdXRBbmltYXRpb24iLCJibHVyIiwiY3JlYXRlVmlldyIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiZm9jdXMiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIm5hbWUiLCJDb25zdGFudHMiLCJEcmF3ZXJQb3NpdGlvbiIsIkxlZnQiLCJzZXRDaGlsZHJlbiIsIm1hbmFnZUNoaWxkcmVuIiwidXBkYXRlVmlldyIsInJlbW92ZVN1YnZpZXdzRnJvbUNvbnRhaW5lcldpdGhJRCIsInJlcGxhY2VFeGlzdGluZ05vblJvb3RWaWV3IiwiY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzIiwiY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyIsIkFuZHJvaWRUZXh0SW5wdXQiLCJNb2RhbEZ1bGxzY3JlZW5WaWV3IiwiU2Nyb2xsVmlldyIsIlZpZXciLCJCbG9iTW9kdWxlIiwiQkxPQl9VUklfU0NIRU1FIiwiQkxPQl9VUklfSE9TVCIsImFkZE5ldHdvcmtpbmdIYW5kbGVyIiwiZW5hYmxlQmxvYlN1cHBvcnQiLCJkaXNhYmxlQmxvYlN1cHBvcnQiLCJjcmVhdGVGcm9tUGFydHMiLCJzZW5kQmxvYiIsInJlbGVhc2UiLCJXZWJTb2NrZXRNb2R1bGUiLCJjb25uZWN0Iiwic2VuZCIsInNlbmRCaW5hcnkiLCJwaW5nIiwiY2xvc2UiLCJPYmplY3QiLCJmb3JFYWNoIiwibW9kdWxlIiwiZG9Nb2NrIiwiZSIsInZpcnR1YWwiLCJSZWFjdCIsInZpZXdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInByb3BzIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiJBQVNBOztBQW9CQUEsSUFBSSxDQUFDQyxJQUFMO0FBUUFELElBQUksQ0FDREMsSUFESCxxQ0FDNEMsWUFBTSxDQUFFLENBRHBELEVBRUdBLElBRkgsQ0FFUSwwQkFGUixFQUVvQztBQUFBLFNBQ2hDQyxhQUFhLENBQUMsMEJBQUQsQ0FEbUI7QUFBQSxDQUZwQyxFQUtHRCxJQUxILENBS1Esd0JBTFIsRUFLa0M7QUFBQSxTQUM5QkMsYUFBYSxDQUFDLHdCQUFELEVBQTJCQyxpQkFBM0IsQ0FEaUI7QUFBQSxDQUxsQyxFQVFHRixJQVJILENBUVEsNkNBUlIsRUFRdUQ7QUFBQSxTQUNuREMsYUFBYSxDQUFDLDZDQUFELENBRHNDO0FBQUEsQ0FSdkQsRUFXR0QsSUFYSCxDQVdRLDBCQVhSLEVBV29DO0FBQUEsU0FDaENDLGFBQWEsQ0FBQywwQkFBRCxDQURtQjtBQUFBLENBWHBDLEVBY0dELElBZEgsQ0FjUSxtQ0FkUixFQWM2QztBQUFB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V0FBVyxFQUFFL0YsSUFBSSxDQUFDZ0MsRUFBTCxFQU5FO0FBT2ZnRSxJQUFBQSxlQUFlLEVBQUVoRyxJQUFJLENBQUNnQyxFQUFMO0FBUEY7QUFuT08sQ0FBMUI7QUE4T0E0SixNQUFNLENBQUM1SSxJQUFQLENBQVluQixpQkFBWixFQUErQmdLLE9BQS9CLENBQXVDLFVBQUFDLE1BQU0sRUFBSTtBQUMvQyxNQUFJO0FBQ0Y5TCxJQUFBQSxJQUFJLENBQUMrTCxNQUFMLENBQVlELE1BQVosRUFBb0I7QUFBQSxhQUFNakssaUJBQWlCLENBQUNpSyxNQUFELENBQXZCO0FBQUEsS0FBcEI7QUFDRCxHQUZELENBRUUsT0FBT0UsQ0FBUCxFQUFVO0FBQ1ZoTSxJQUFBQSxJQUFJLENBQUMrTCxNQUFMLENBQVlELE1BQVosRUFBb0I7QUFBQSxhQUFNakssaUJBQWlCLENBQUNpSyxNQUFELENBQXZCO0FBQUEsS0FBcEIsRUFBcUQ7QUFBQ0csTUFBQUEsT0FBTyxFQUFFO0FBQVYsS0FBckQ7QUFDRDtBQUNGLENBTkQ7QUFRQWpNLElBQUksQ0FBQytMLE1BQUwsNkNBRUU7QUFBQSxTQUFNbEssaUJBQU47QUFBQSxDQUZGO0FBS0E3QixJQUFJLENBQUMrTCxNQUFMLG9EQUErRCxZQUFNO0FBQ25FLE1BQU1HLEtBQUssR0FBR3RLLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLFNBQU8sVUFBQXVLLFFBQVE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQSxpQ0FFRjtBQUNQLGlCQUFPRCxLQUFLLENBQUNFLGFBQU4sQ0FBb0JELFFBQXBCLEVBQThCLEtBQUtFLEtBQW5DLEVBQTBDLEtBQUtBLEtBQUwsQ0FBV0MsUUFBckQsQ0FBUDtBQUNEO0FBSlU7QUFBQTtBQUFBLE1BQ0NKLEtBQUssQ0FBQzFMLFNBRFA7QUFBQSxHQUFmO0FBTUQsQ0FURCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTW9ja05hdGl2ZU1ldGhvZHMgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vTW9ja05hdGl2ZU1ldGhvZHMnKTtcbmNvbnN0IG1vY2tDb21wb25lbnQgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJy4vbW9ja0NvbXBvbmVudCcpO1xuXG5qZXN0LnJlcXVpcmVBY3R1YWwoJy4uL0xpYnJhcmllcy9wb2x5ZmlsbHMvT2JqZWN0LmVzNy5qcycpO1xuamVzdC5yZXF1aXJlQWN0dWFsKCcuLi9MaWJyYXJpZXMvcG9seWZpbGxzL2Vycm9yLWd1YXJkJyk7XG5cbmdsb2JhbC5fX0RFVl9fID0gdHJ1ZTtcblxuZ2xvYmFsLlByb21pc2UgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3Byb21pc2UnKTtcbmdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBqZXN0LnJlcXVpcmVBY3R1YWwoJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZScpO1xuXG5nbG9iYWwucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xufTtcbmdsb2JhbC5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG5qZXN0Lm1vY2soJy4uL0xpYnJhcmllcy9Db3JlL0RldnRvb2xzL3NldHVwRGV2dG9vbHMnKTtcblxuLy8gdGhlcmUncyBhIF9fbW9ja19fIGZvciBpdC5cbmplc3Quc2V0TW9jayhcbiAgJy4uL0xpYnJhcmllcy92ZW5kb3IvY29yZS9FcnJvclV0aWxzJyxcbiAgcmVxdWlyZSgnLi4vTGlicmFyaWVzL3ZlbmRvci9jb3JlL0Vycm9yVXRpbHMnKSxcbik7XG5cbmplc3RcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db3JlL0luaXRpYWxpemVDb3JlJywgKCkgPT4ge30pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9JbWFnZS9JbWFnZScpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvVGV4dC9UZXh0JywgTW9ja05hdGl2ZU1ldGhvZHMpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCcsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL01vZGFsL01vZGFsJyksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3JywgTW9ja05hdGl2ZU1ldGhvZHMpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9SZWZyZXNoQ29udHJvbC9SZWZyZXNoQ29udHJvbCcsICgpID0+XG4gICAgamVzdC5yZXF1aXJlQWN0dWFsKFxuICAgICAgJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1JlZnJlc2hDb250cm9sL19fbW9ja3NfXy9SZWZyZXNoQ29udHJvbE1vY2snLFxuICAgICksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldycsICgpID0+XG4gICAgamVzdC5yZXF1aXJlQWN0dWFsKFxuICAgICAgJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvX19tb2Nrc19fL1Njcm9sbFZpZXdNb2NrJyxcbiAgICApLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcicsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcicsXG4gICAgKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0FuaW1hdGVkL3NyYy9BbmltYXRlZEltcGxlbWVudGF0aW9uJywgKCkgPT4ge1xuICAgIGNvbnN0IEFuaW1hdGVkSW1wbGVtZW50YXRpb24gPSBqZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgICAnLi4vTGlicmFyaWVzL0FuaW1hdGVkL3NyYy9BbmltYXRlZEltcGxlbWVudGF0aW9uJyxcbiAgICApO1xuICAgIGNvbnN0IG9sZENyZWF0ZSA9IEFuaW1hdGVkSW1wbGVtZW50YXRpb24uY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ7XG4gICAgQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbi5jcmVhdGVBbmltYXRlZENvbXBvbmVudCA9IGZ1bmN0aW9uKFxuICAgICAgQ29tcG9uZW50LFxuICAgICAgZGVmYXVsdFByb3BzLFxuICAgICkge1xuICAgICAgY29uc3QgV3JhcHBlZCA9IG9sZENyZWF0ZShDb21wb25lbnQsIGRlZmF1bHRQcm9wcyk7XG4gICAgICBXcmFwcGVkLl9fc2tpcFNldE5hdGl2ZVByb3BzX0ZPUl9URVNUU19PTkxZID0gdHJ1ZTtcbiAgICAgIHJldHVybiBXcmFwcGVkO1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGVkSW1wbGVtZW50YXRpb247XG4gIH0pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnLCAoKSA9PiB7XG4gICAgY29uc3QgUmVhY3ROYXRpdmUgPSBqZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgICAnLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJyxcbiAgICApO1xuICAgIGNvbnN0IE5hdGl2ZU1ldGhvZHNNaXhpbiA9XG4gICAgICBSZWFjdE5hdGl2ZS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRFxuICAgICAgICAuTmF0aXZlTWV0aG9kc01peGluO1xuXG4gICAgT2JqZWN0LmFzc2lnbihOYXRpdmVNZXRob2RzTWl4aW4sIE1vY2tOYXRpdmVNZXRob2RzKTtcbiAgICBPYmplY3QuYXNzaWduKFJlYWN0TmF0aXZlLk5hdGl2ZUNvbXBvbmVudC5wcm90b3R5cGUsIE1vY2tOYXRpdmVNZXRob2RzKTtcblxuICAgIHJldHVybiBSZWFjdE5hdGl2ZTtcbiAgfSlcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9lbnN1cmVDb21wb25lbnRJc05hdGl2ZScsICgpID0+ICgpID0+XG4gICAgdHJ1ZSxcbiAgKTtcblxuY29uc3QgbW9ja05hdGl2ZU1vZHVsZXMgPSB7XG4gIEFjY2Vzc2liaWxpdHlJbmZvOiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGFubm91bmNlRm9yQWNjZXNzaWJpbGl0eTogamVzdC5mbigpLFxuICAgIGZldGNoOiBqZXN0LmZuKCksXG4gICAgaXNCb2xkVGV4dEVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc0dyYXlzY2FsZUVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc0ludmVydENvbG9yc0VuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1JlZHVjZU1vdGlvbkVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1JlZHVjZVRyYW5zcGFyZW5jeUVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICBpc1NjcmVlblJlYWRlckVuYWJsZWQ6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgc2V0QWNjZXNzaWJpbGl0eUZvY3VzOiBqZXN0LmZuKCksXG4gIH0sXG4gIEFsZXJ0TWFuYWdlcjoge1xuICAgIGFsZXJ0V2l0aEFyZ3M6IGplc3QuZm4oKSxcbiAgfSxcbiAgQXBwU3RhdGU6IHtcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICB9LFxuICBBc3luY0xvY2FsU3RvcmFnZToge1xuICAgIG11bHRpR2V0OiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCwgW10pKSxcbiAgICApLFxuICAgIG11bHRpU2V0OiBqZXN0LmZuKChlbnRyaWVzLCBjYWxsYmFjaykgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICksXG4gICAgbXVsdGlSZW1vdmU6IGplc3QuZm4oKGtleXMsIGNhbGxiYWNrKSA9PlxuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSksXG4gICAgKSxcbiAgICBtdWx0aU1lcmdlOiBqZXN0LmZuKChlbnRyaWVzLCBjYWxsYmFjaykgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICksXG4gICAgY2xlYXI6IGplc3QuZm4oY2FsbGJhY2sgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsKSkpLFxuICAgIGdldEFsbEtleXM6IGplc3QuZm4oY2FsbGJhY2sgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayhudWxsLCBbXSkpKSxcbiAgfSxcbiAgQnVpbGRJbmZvOiB7XG4gICAgYXBwVmVyc2lvbjogJzAnLFxuICAgIGJ1aWxkVmVyc2lvbjogJzAnLFxuICAgIGdldENvbnN0YW50cygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFwcFZlcnNpb246ICcwJyxcbiAgICAgICAgYnVpbGRWZXJzaW9uOiAnMCcsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG4gIENsaXBib2FyZDoge1xuICAgIHNldFN0cmluZzogamVzdC5mbigpLFxuICB9LFxuICBEYXRhTWFuYWdlcjoge1xuICAgIHF1ZXJ5RGF0YTogamVzdC5mbigpLFxuICB9LFxuICBEZXZpY2VJbmZvOiB7XG4gICAgRGltZW5zaW9uczoge1xuICAgICAgd2luZG93OiB7XG4gICAgICAgIGZvbnRTY2FsZTogMixcbiAgICAgICAgaGVpZ2h0OiAxMzM0LFxuICAgICAgICBzY2FsZTogMixcbiAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgIH0sXG4gICAgICBzY3JlZW46IHtcbiAgICAgICAgZm9udFNjYWxlOiAyLFxuICAgICAgICBoZWlnaHQ6IDEzMzQsXG4gICAgICAgIHNjYWxlOiAyLFxuICAgICAgICB3aWR0aDogNzUwLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxuICBGYWNlYm9va1NESzoge1xuICAgIGxvZ2luOiBqZXN0LmZuKCksXG4gICAgbG9nb3V0OiBqZXN0LmZuKCksXG4gICAgcXVlcnlHcmFwaFBhdGg6IGplc3QuZm4oKHBhdGgsIG1ldGhvZCwgcGFyYW1zLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soKSksXG4gIH0sXG4gIEdyYXBoUGhvdG9VcGxvYWQ6IHtcbiAgICB1cGxvYWQ6IGplc3QuZm4oKSxcbiAgfSxcbiAgSTE4bjoge1xuICAgIHRyYW5zbGF0aW9uc0RpY3Rpb25hcnk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICdHb29kIGJ5ZSwge25hbWV9IXxCeWUgbWVzc2FnZSc6ICdcXHV7MDBBMX1BZGlcXHV7MDBGM31zIHtuYW1lfSEnLFxuICAgIH0pLFxuICB9LFxuICBJbWFnZUxvYWRlcjoge1xuICAgIGdldFNpemU6IGplc3QuZm4odXJsID0+IFByb21pc2UucmVzb2x2ZSh7d2lkdGg6IDMyMCwgaGVpZ2h0OiAyNDB9KSksXG4gICAgcHJlZmV0Y2hJbWFnZTogamVzdC5mbigpLFxuICB9LFxuICBJbWFnZVZpZXdNYW5hZ2VyOiB7XG4gICAgZ2V0U2l6ZTogamVzdC5mbigodXJpLCBzdWNjZXNzKSA9PlxuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBzdWNjZXNzKDMyMCwgMjQwKSksXG4gICAgKSxcbiAgICBwcmVmZXRjaEltYWdlOiBqZXN0LmZuKCksXG4gIH0sXG4gIEtleWJvYXJkT2JzZXJ2ZXI6IHtcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICB9LFxuICBMaW5raW5nOiB7XG4gICAgb3BlblVSTDogamVzdC5mbigpLFxuICAgIGNhbk9wZW5VUkw6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHRydWUpKSxcbiAgICBvcGVuU2V0dGluZ3M6IGplc3QuZm4oKSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZ2V0SW5pdGlhbFVSTDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHNlbmRJbnRlbnQ6IGplc3QuZm4oKSxcbiAgfSxcbiAgTG9jYXRpb25PYnNlcnZlcjoge1xuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZ2V0Q3VycmVudFBvc2l0aW9uOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gICAgcmVxdWVzdEF1dGhvcml6YXRpb246IGplc3QuZm4oKSxcbiAgICBzZXRDb25maWd1cmF0aW9uOiBqZXN0LmZuKCksXG4gICAgc3RhcnRPYnNlcnZpbmc6IGplc3QuZm4oKSxcbiAgICBzdG9wT2JzZXJ2aW5nOiBqZXN0LmZuKCksXG4gIH0sXG4gIE1vZGFsRnVsbHNjcmVlblZpZXdNYW5hZ2VyOiB7fSxcbiAgTmV0SW5mbzoge1xuICAgIGZldGNoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgICBnZXRDb25uZWN0aW9uSW5mbzogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBpc0Nvbm5lY3RlZDoge1xuICAgICAgZmV0Y2g6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIH0sXG4gICAgaXNDb25uZWN0aW9uRXhwZW5zaXZlOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgfSxcbiAgTmV0d29ya2luZzoge1xuICAgIHNlbmRSZXF1ZXN0OiBqZXN0LmZuKCksXG4gICAgYWJvcnRSZXF1ZXN0OiBqZXN0LmZuKCksXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgfSxcbiAgUHVzaE5vdGlmaWNhdGlvbk1hbmFnZXI6IHtcbiAgICBwcmVzZW50TG9jYWxOb3RpZmljYXRpb246IGplc3QuZm4oKSxcbiAgICBzY2hlZHVsZUxvY2FsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgY2FuY2VsQWxsTG9jYWxOb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlQWxsRGVsaXZlcmVkTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgIGdldERlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oY2FsbGJhY2sgPT4gcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBbXSkpLFxuICAgIHJlbW92ZURlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICBzZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcjogamVzdC5mbigpLFxuICAgIGdldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKDApKSxcbiAgICApLFxuICAgIGNhbmNlbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgIGdldFNjaGVkdWxlZExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygpKSxcbiAgICApLFxuICAgIHJlcXVlc3RQZXJtaXNzaW9uczogamVzdC5mbigoKSA9PlxuICAgICAgUHJvbWlzZS5yZXNvbHZlKHthbGVydDogdHJ1ZSwgYmFkZ2U6IHRydWUsIHNvdW5kOiB0cnVlfSksXG4gICAgKSxcbiAgICBhYmFuZG9uUGVybWlzc2lvbnM6IGplc3QuZm4oKSxcbiAgICBjaGVja1Blcm1pc3Npb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKHthbGVydDogdHJ1ZSwgYmFkZ2U6IHRydWUsIHNvdW5kOiB0cnVlfSkpLFxuICAgICksXG4gICAgZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobnVsbCkpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0sXG4gIFNvdXJjZUNvZGU6IHtcbiAgICBzY3JpcHRVUkw6IG51bGwsXG4gIH0sXG4gIFN0YXR1c0Jhck1hbmFnZXI6IHtcbiAgICBIRUlHSFQ6IDQyLFxuICAgIHNldENvbG9yOiBqZXN0LmZuKCksXG4gICAgc2V0U3R5bGU6IGplc3QuZm4oKSxcbiAgICBzZXRIaWRkZW46IGplc3QuZm4oKSxcbiAgICBzZXROZXR3b3JrQWN0aXZpdHlJbmRpY2F0b3JWaXNpYmxlOiBqZXN0LmZuKCksXG4gICAgc2V0QmFja2dyb3VuZENvbG9yOiBqZXN0LmZuKCksXG4gICAgc2V0VHJhbnNsdWNlbnQ6IGplc3QuZm4oKSxcbiAgfSxcbiAgVGltaW5nOiB7XG4gICAgY3JlYXRlVGltZXI6IGplc3QuZm4oKSxcbiAgICBkZWxldGVUaW1lcjogamVzdC5mbigpLFxuICB9LFxuICBVSU1hbmFnZXI6IHtcbiAgICBBbmRyb2lkVmlld1BhZ2VyOiB7XG4gICAgICBDb21tYW5kczoge1xuICAgICAgICBzZXRQYWdlOiBqZXN0LmZuKCksXG4gICAgICAgIHNldFBhZ2VXaXRob3V0QW5pbWF0aW9uOiBqZXN0LmZuKCksXG4gICAgICB9LFxuICAgIH0sXG4gICAgYmx1cjogamVzdC5mbigpLFxuICAgIGNyZWF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICBkaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZDogamVzdC5mbigpLFxuICAgIGZvY3VzOiBqZXN0LmZuKCksXG4gICAgZ2V0Vmlld01hbmFnZXJDb25maWc6IGplc3QuZm4obmFtZSA9PiB7XG4gICAgICBpZiAobmFtZSA9PT0gJ0FuZHJvaWREcmF3ZXJMYXlvdXQnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgQ29uc3RhbnRzOiB7XG4gICAgICAgICAgICBEcmF3ZXJQb3NpdGlvbjoge1xuICAgICAgICAgICAgICBMZWZ0OiAxMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBzZXRDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIG1hbmFnZUNoaWxkcmVuOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlVmlldzogamVzdC5mbigpLFxuICAgIHJlbW92ZVN1YnZpZXdzRnJvbUNvbnRhaW5lcldpdGhJRDogamVzdC5mbigpLFxuICAgIHJlcGxhY2VFeGlzdGluZ05vblJvb3RWaWV3OiBqZXN0LmZuKCksXG4gICAgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzOiB7fSxcbiAgICBjdXN0b21EaXJlY3RFdmVudFR5cGVzOiB7fSxcbiAgICBBbmRyb2lkVGV4dElucHV0OiB7XG4gICAgICBDb21tYW5kczoge30sXG4gICAgfSxcbiAgICBNb2RhbEZ1bGxzY3JlZW5WaWV3OiB7XG4gICAgICBDb25zdGFudHM6IHt9LFxuICAgIH0sXG4gICAgU2Nyb2xsVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICAgIFZpZXc6IHtcbiAgICAgIENvbnN0YW50czoge30sXG4gICAgfSxcbiAgfSxcbiAgQmxvYk1vZHVsZToge1xuICAgIEJMT0JfVVJJX1NDSEVNRTogJ2NvbnRlbnQnLFxuICAgIEJMT0JfVVJJX0hPU1Q6IG51bGwsXG4gICAgYWRkTmV0d29ya2luZ0hhbmRsZXI6IGplc3QuZm4oKSxcbiAgICBlbmFibGVCbG9iU3VwcG9ydDogamVzdC5mbigpLFxuICAgIGRpc2FibGVCbG9iU3VwcG9ydDogamVzdC5mbigpLFxuICAgIGNyZWF0ZUZyb21QYXJ0czogamVzdC5mbigpLFxuICAgIHNlbmRCbG9iOiBqZXN0LmZuKCksXG4gICAgcmVsZWFzZTogamVzdC5mbigpLFxuICB9LFxuICBXZWJTb2NrZXRNb2R1bGU6IHtcbiAgICBjb25uZWN0OiBqZXN0LmZuKCksXG4gICAgc2VuZDogamVzdC5mbigpLFxuICAgIHNlbmRCaW5hcnk6IGplc3QuZm4oKSxcbiAgICBwaW5nOiBqZXN0LmZuKCksXG4gICAgY2xvc2U6IGplc3QuZm4oKSxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICB9LFxufTtcblxuT2JqZWN0LmtleXMobW9ja05hdGl2ZU1vZHVsZXMpLmZvckVhY2gobW9kdWxlID0+IHtcbiAgdHJ5IHtcbiAgICBqZXN0LmRvTW9jayhtb2R1bGUsICgpID0+IG1vY2tOYXRpdmVNb2R1bGVzW21vZHVsZV0pOyAvLyBuZWVkZWQgYnkgRmFjZWJvb2tTREstdGVzdFxuICB9IGNhdGNoIChlKSB7XG4gICAgamVzdC5kb01vY2sobW9kdWxlLCAoKSA9PiBtb2NrTmF0aXZlTW9kdWxlc1ttb2R1bGVdLCB7dmlydHVhbDogdHJ1ZX0pO1xuICB9XG59KTtcblxuamVzdC5kb01vY2soXG4gICcuLi9MaWJyYXJpZXMvQmF0Y2hlZEJyaWRnZS9OYXRpdmVNb2R1bGVzJyxcbiAgKCkgPT4gbW9ja05hdGl2ZU1vZHVsZXMsXG4pO1xuXG5qZXN0LmRvTW9jaygnLi4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuICByZXR1cm4gdmlld05hbWUgPT5cbiAgICBjbGFzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KHZpZXdOYW1lLCB0aGlzLnByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9O1xufSk7XG4iXX0=