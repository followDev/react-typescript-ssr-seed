type Query {
    getProfile(filters: FindOptions!): [Profile]
    profile(id: ID!): Profile
}

type Mutation {
    createProfile(        
        githubId: String
        lastTokenWeb: String
        lastTokenMobile: String
        name: String
        email: String
        avatarUrl: String
        bio: String
        location: String
        createdAt: String
        updatedAt: String
    ): Profile
    updateProfile(
        id: ID!
        githubId: String
        lastTokenWeb: String
        lastTokenMobile: String
        name: String
        email: String
        avatarUrl: String
        bio: String
        location: String
        createdAt: String
        updatedAt: String
    ): Profile
}

type Subscription {
    profileRecieved: Profile
}

type Profile {
	id: Int
	githubId: String
	lastTokenWeb: String
	lastTokenMobile: String
	name: String
	email: String
	avatarUrl: String
	bio: String
	location: String
	createdAt: String
	updatedAt: String
}

input FindOptions {
	select: [String]
	relations: [String]
	where: InputProfile
	not: InputProfile
	in: InputProfile
	like: InputProfile
    any: InputProfile
	order: InputProfile
	skip: Int
	take: Int
	cache: Boolean
}

input InputProfile {
	id: Int
	githubId: String
	lastTokenWeb: String
	lastTokenMobile: String
	name: String
	email: String
	avatarUrl: String
	bio: String
	location: String
	createdAt: String
	updatedAt: String
}
