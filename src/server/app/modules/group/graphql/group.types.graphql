type Query {
    getGroup(filters: GroupFindOptions!): [Group]
    group(id: ID!): Group
}

type Mutation {
    createGroup(ownerId: ID!, groupName: String, groupDescription: String, date: String): Group
    updateGroup(
        id: ID!
        ownerId: String
        groupName: String
        groupDescription: String
        date: String
    ): Group
}

type Subscription {
    groupRecieved: Group
}
type Group {
    id: Int
    ownerId: Int
    groupName: String
    groupDescription: String
    date: String
    groupMembers: [GroupMember]
    chats: [Chat]
}

input GroupFindOptions {
	select: [String]
	relations: [String]
	where: InputGroup
	not: InputGroup
	in: InputGroup
	like: InputGroup
	any: InputGroup
	order: InputGroup
	skip: Int
	take: Int
	cache: Boolean
}

input InputGroup {
	id: Int
	ownerId: Int
	groupName: String
	groupDescription: String
	date: String
}